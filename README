-*- mode: org -*-

Hall is a command-line application and a set of Guile libraries that
allow you to quickly create and publish Guile projects.  It allows you
to transparently support the GNU build system, manage a project
hierarchy & provides tight coupling to Guix.

It's fundamental aim is to provide a black box that just works (tm)
for you so you distribute, manage & create guile projects.

This README is all written documentation that currently exists.  The
project must be considered Alpha software at present.

Nonetheless, all commands and arguments are documented, and passing
the -h flag to any command or sub-command should provide you with some
guidance.  In addition all procedures in the codebase are documented
with docstrings.

Beneath you will find some basic usage examples.

Below that, for now, you will find some development notes that may
act as additional documentation if you are trying to understand some
of the design decisions.

* Creating a New Project

  #+BEGIN_SRC bash
    cd /to/some/directory/
    hall init --author "Jane Doe" frobnigator --execute
    # Creating project: frobnigator
    # ...
    cd frobnigator
    # Do some hacking
    emacs hall.scm # Add other Guile dependencies
    # Add new files to our hall.scm
    hall scan
    # Dryrun:
    #...
    hall scan -x # Add new files.
  #+END_SRC

* Converting an Existing Project

  #+BEGIN_SRC bash
    cd /to/some/guile-project/
    hall init --convert --author "Jane Doe" --prefix guile frobnigator --execute
    # Creating project: guile-frobnigator
    # ...
    emacs hall.scm # Add other Guile dependencies, and tweak project settings.
    # Add new files to our hall.scm
    hall scan
    # Remove cruft
    hall clean
  #+END_SRC

* Getting Ready for Distribution

  #+BEGIN_SRC bash
    # Get ready to test commandline or distribute:
    hall dist -x # create the build infrastructure

    # Oops, we made a mistake
    hall clean -x # undo previous step

    # Let's re-generate the guix file.
    rm guix.scm && hal guix -x # re-generate guix file

    # Now let's create the build infrastructure
    hall dist -x # recreate build infrastructure

    # Let's build it!
    guix environment -l guix.scm
    autoreconf -vif && ./configure && make && exit

    # Let's run it!
    ./pre-inst-env guile # Here we can load our local libraries! 
    ./pre-inst-env scripts/${script} # Or run our scripts

    # We're ready for a tarball
    guix environment -l guix.scm
    make dist
  #+END_SRC

* Next Steps

  - [X] Need following sections under files:
    + libraries
    + tests
    + programs
    + documentation
    + infrastructure
  - This is to generate the Makefile etc.

  - [X] Should generate filetypes as part of 'write operation:
    + .scm -> scheme-file
    + .sh -> shell-file
    + .texi -> texi-file
    + retain 'file' as fall back for additional "languages"

  - [X] Need halcyon.scm parser
    + Need utilities to read hal records (e.g. halref, file parser)
      
  - [X] Implement halcyon file scanner:
    - scan current directory for halcyon.scm
    - if not found, (chgdir "../")
    - try again, until error (or pwd "/")?
    - -> error out

  - define operations:
    - [X] hal init : create new hal project
      - [X] hal init --here : create halcyon file here, & standard files.
      - [X] hal init --refresh : scan & regenerate guix.scm, HACKING, COPYING.
    - [X] hal scan : derive new halcyon file from project
      - [X] hal scan: … Basic re-generation.
    - [X] hal clean : remove all files not in specification.
    - [X] hal guix : Guix tooling
      - [X] hal guix : … generate a local dev guix file
      - [X] hal guix --type=tarball|git : generate a guix recipe for
        tarball or git (hub) based distribution
        - tarball dist : recipe for guix assuming no hal dependency
        - git dist : depends on gnu build infrastructure & hal
    - [-] hal dist : generate distribution tarball
      - [ ] hal dist : generate a tarball, and tidy project
      - [X] hal dist --infrastructure : only generate autotools
        infrastructure files
        + this will be part of the guix building process with "guile
          build system" (i.e. when building from a hal project
          (e.g. from git checkout or other source)).

  - [X] define cli
    - [X] hal
    - [X] hal init
    - [X] hal clean
    - [X] hal scan
    - [X] hal guix
    - [X] hal dist

  - [X] Develop build system & prepare for release
    - [X] Bootstrap build system from ourselves
    - [X] Consider & maybe rename project to halcyon or hall ->
      renamed to Hall
    - [X] Write basic documentation
      + Not info (for next release)
      + Instead, README file & demo screencasts
    - [X] Use settings in home for basic configuration
    - [X] Implement online gpl license fetching

  - [X] bugfixes:
    + [X] .dirstamp file needs to be handled
      * reproducible: run distcheck, then run hall clean

* Anatomy of a Guile Project

  - Documentation:
    - project/
      - README
      - HACKING
      - COPYING
      - guix.scm
      - docs/
        - project.texi
      - project/
        - foo.scm
        - bar.scm
        - frob.scm.in
      - tests/
        - foo.scm
        - baz.scm
      - project.scm
      - scripts/
        - project.in
        - project-too.scm

* `hal` Spec

  `hal` needs to be able to create a project from a spec.  The spec
  needs to include the following bits of information:
  - name
  - version
  - author [v2: plural & overrideable per file]
  - copyright [v2: overrideable per file]
  - synopsis
  - description
  - home-page
  - license
  - inputs (as guix variables)
  - files
    - libraries
    - tests
    - programs
    - documentation
    - infrastructure

* Defaults

  `hal` uses:
  - %base-libraries:
    + `(,(directory "$project" '()))
  - %base-programs:
    + `(,(directory "bin" `(,(scheme-file "$project"))))
  - %base-documentation:
    + `(,(readme-file) ,(hacking-file) ,(license-file license)
        ,(directory "doc" `(,(manual-file metadata))))
  - %base-tests:
    + `(,(directory "tests" '()))
  - %base-infrastructure:
    + `(,(guix-file metadata)
        ,(hal-file metadata))
    
  - In addition, for generating the guix.scm file we default to:
    - name: guile-$project
    - gnu-build-system
    - (native-inputs
         `(("autoconf" ,autoconf)
           ("automake" ,automake)
           ("pkg-config" ,pkg-config)
           ("texinfo" ,texinfo)
           ("guile-hal" ,guile-hal)))
    - (inputs `(("guile" ,guile-2.2)))
    - (arguments
         '(#:phases (modify-phases %standard-phases
                      (add-before 'configure 'set-guilesitedir
                                  (lambda _
                                    (substitute* "Makefile.in"
                                      (("^guilesitedir =.*$")
                                       "guilesitedir = \
$(datadir)/guile/site/$(GUILE_EFFECTIVE_VERSION)\n"))
                              #t))
                      (add-after 'unpack 'hal-dist
                                 (lambda _
                                   (zero? (system* "hal" "dist"))))
                      (add-after 'hal-dist 'autoreconf
                                 (lambda _
                                   (zero? (system* "autoreconf" "-vif")))))))

* Files & Directories

  - files are procedures that return a procedure of two argument,
    expected to be the metadata & the filesystem context, which when
    invoked generates a file in the current filesystem context
    according to the file's spec.
    + the file's spec is as follows:
      + name
      + language
      + extension
      + contents

  - directories are procedures that return a procedure of one
    argument, expected to be the metadata & the filesystem context,
    which when invoked generates a directory in the current filesystem
    context according to the directory's spec.
    + A directory's spec is as follows:
      + name

  - metadata is an association list of the following fields from the spec:
    + name version author copyright synopsis description home-page
      license inputs

  - the current filesystem context is a list in which the first
    element is the path to the project root (in the case of an
    existing project), or the folder which will contain the project,
    and each element afterwards is the name of the next part of the
    directory structure of the project, e.g.:
    + '("/path/to/project" "doc")
    + '("/path/to/project" "project" "parsers")
    + '("/path/to/src project doc")
