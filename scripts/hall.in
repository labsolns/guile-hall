#!@GUILE@ \
--no-auto-compile -e main -s
!#

;; bin/hall --- hall cli -*- coding: utf-8 -*-
;;
;; Copyright (C) 2018 Alex Sassmannshausen <alex@pompo.co>
;;
;; Author: Alex Sassmannshausen <alex@pompo.co>
;;
;; This file is part of guile-hall.
;;
;; guile-hall is free software; you can redistribute it and/or modify it under
;; the terms of the GNU General Public License as published by the Free
;; Software Foundation; either version 3 of the License, or (at your option)
;; any later version.
;;
;; guile-hall is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
;; more details.
;;
;; You should have received a copy of the GNU General Public License along
;; with guile-hall; if not, contact:
;;
;; Free Software Foundation           Voice:  +1-617-542-5942
;; 59 Temple Place - Suite 330        Fax:    +1-617-542-2652
;; Boston, MA  02111-1307,  USA       gnu@gnu.org

;;; Commentary:
;;
;;; Code:

(use-modules (config)
             (config api)
             (config parser sexp)
             (guix licenses)
             (hall clean)
             (hall common)
             (hall dist)
             (hall guix)
             (hall init)
             (hall scan)
             (ice-9 match)
             (srfi srfi-19)
             (srfi srfi-26))

(define %configuration
  (configuration
   (name 'hall)
   (version "0.1")
   (author "Alex Sassmannshausen")
   (copyright '(2018))
   (license gpl3+)
   (synopsis "Guile project manager")
   (description "")
   (keywords
    (list
     (switch (name 'execute) (character #\x)
             (default #f) (test boolean?)
             (synopsis "Carry out operations, instead of displaying them."))))
   (subcommands
    (list
     (configuration
      (name 'clean)
      (synopsis "Clean your project.")
      (wanted '((keywords execute)))
      (keywords
       (list
        (switch
         (name 'skip) (default '())
         (test (match-lambda (((? string?) ...) #t) (_ #f)))
         (handler (cut string-split <> #\,))
         (synopsis "CSV list of files to skip.")
         (example "scripts/foo,AUTHORS")))))
     (configuration
      (name 'distribute) (alias 'dist)
      (synopsis "Prepare your project for distribution.")
      (wanted '((keywords execute))))
     (configuration
      (name 'guix)
      (synopsis "Manage your project's Guix file.")
      (wanted '((keywords execute)))
      (keywords
       (list
        (switch (name 'type) (default 'local)
                (test symbol?) (handler string->symbol)
                (synopsis "Guix recipe type to generate (defaults to local)")
                (example "local|git|tarball")))))
     (configuration
      (name 'initiate) (alias 'init)
      (synopsis "Create or migrate a new project.")
      (wanted '((keywords execute)))
      (arguments
       (list
        (argument (name 'name) (optional? #f)
                  (test (negate string-null?))
                  (synopsis "Name for the project."))))
      (keywords
       (list
        (switch (name 'convert) (default #f) (test boolean?)
                (synopsis "Convert this project to a Hall project."))
        (setting (name 'author) (default "")
                 (synopsis "Author of the project."))
        (setting (name 'prefix) (default "")
                 (synopsis "Prefix of the project."))
        (setting (name 'website) (default "")
                 (synopsis "Home-page for the project."))
        (setting (name 'license) (default 'gpl3+)
                 (handler string->symbol) (test symbol?)
                 (example "gpl3+")
                 (synopsis "License of your project (defaults to gpl3+)"))))
      (subcommands
       (list
        (configuration
         (name 'refresh)
         (wanted '((keywords execute)))
         (synopsis "Regenerate guix.scm, HACKING & COPYING files.")))))
     (configuration
      (name 'scan)
      (synopsis "Refresh your project's Hall file.")
      (wanted '((keywords execute)))
      (keywords
       (list
        (switch
         (name 'skip) (default '())
         (test (match-lambda (((? string?) ...) #t) (_ #f)))
         (handler (cut string-split <> #\,))
         (synopsis "CSV list of files to skip.")
         (example "scripts/foo,AUTHORS")))))))
   (directory (in-home "."))
   (parser simple-sexp-parser)))

(define* (main #:optional (args (command-line)))
  (let* ((options (getopt-config-auto args %configuration))
         (operation (if (option-ref options 'execute) 'exec 'show)))
    (match (full-command options)
      (("hall")
       (emit-help options))
      (("hall" "clean")
       (clean-project (read-spec) (find-project-root-directory)
                      (option-ref options 'skip) operation))
      (("hall" "distribute")
       (make-dist-infrastructure (read-spec) (find-project-root-directory)
                                 operation))
      (("hall" "guix")
       (let ((run (cute <> (read-spec) (find-project-root-directory)
                        operation)))
         (match (option-ref options 'type)
           ('local (run rewrite-guix-file))
           ('git (run git-guix-recipe))
           ('tarball (run tarball-guix-recipe)))))
      (("hall" "initiate")
       (let ((spec (values->specification (option-ref options '(name))
                                          (option-ref options 'prefix) "0.1"
                                          (option-ref options 'author)
                                          `(,(date-year (current-date)))
                                          "" ""
                                          (option-ref options 'website)
                                          (option-ref options 'license)
                                          '`() '() '() '() '() '())))
         (cond ((option-ref options 'convert)
                (create-project-here spec '() operation))
               (else (create-project spec '() operation)))))
      (("hall" "initiate" "refresh")
       (recreate-project-here (read-spec) '() operation))
      (("hall" "scan")
       (scan-project (read-spec) (find-project-root-directory)
                     (option-ref options 'skip) operation)))))

;;; Local Variables:
;;; mode: scheme
;;; End:
